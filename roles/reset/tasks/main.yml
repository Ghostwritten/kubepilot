---
- name: "Display reset phase information"
  debug:
    msg: "Reset Phase for {{ inventory_hostname }}"

- name: "Reset Kubernetes cluster state with kubeadm"
  shell: kubeadm reset -f
  become: true
  ignore_errors: true
  when: "'bastion' not in group_names"

- name: "Stop and disable kubelet service"
  systemd:
    name: kubelet
    enabled: false
    state: stopped
    daemon_reload: true
  become: true
  ignore_errors: true
  when: "'bastion' not in group_names"

- name: "Check if kubelet package is installed"
  package_facts:
    manager: auto
  when: "'bastion' not in group_names"

- name: "Remove kubelet package"
  package:
    name: "kubelet-{{ kube_version_full | default('*') }}"
    state: absent
  become: true
  ignore_errors: true
  when: "'bastion' not in group_names"

- name: "Remove kubeadm package"
  package:
    name: "kubeadm-{{ kube_version_full | default('*') }}"
    state: absent
  become: true
  ignore_errors: true
  when: "'bastion' not in group_names"

- name: "Remove kubectl package from control plane"
  package:
    name: "kubectl-{{ kube_version_full | default('*') }}"
    state: absent
  become: true
  ignore_errors: true
  when: inventory_hostname in groups['kube_control_plane']

- name: "Remove Kubernetes component directories from nodes"
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/kubernetes
    - /var/lib/kubelet
    - /var/lib/etcd
    - /var/run/kubernetes
    - /var/log/pods
  become: true
  when: "'bastion' not in group_names"

- name: "Remove Kubernetes component files from nodes"
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/systemd/system/kubelet.service
    - /usr/lib/systemd/system/kubelet.service.d
    - /usr/lib/systemd/system/containerd.service
  become: true
  when: "'bastion' not in group_names"

- name: "Stop and disable container runtime services"
  systemd:
    name: "{{ item }}"
    state: stopped
    enabled: false
  loop:
    - containerd
    - docker
  become: true
  ignore_errors: true
  when: "'bastion' not in group_names"

- name: "Remove CNI directories and configurations"
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/cni/net.d
    - /opt/cni
    - /var/lib/cni
    - /var/lib/calico
    - /etc/containerd
  become: true
  when: "'bastion' not in group_names"

- name: "Remove container runtime binary files"
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /usr/local/bin/containerd
    - /usr/local/bin/containerd-shim
    - /usr/local/bin/ctr
    - /usr/local/bin/crictl
    - /usr/local/bin/runc
    - /usr/bin/containerd
    - /usr/bin/containerd-shim
    - /usr/bin/ctr
    - /usr/bin/crictl
    - /usr/bin/runc
  become: true
  when: "'bastion' not in group_names"

- name: "Clean up network interfaces"
  shell: |
    for interface in cni0 flannel.1 vxlan.calico docker0 kube-bridge; do
      if ip link show "$interface" &>/dev/null; then
        ip link delete "$interface" || echo "Failed to delete $interface"
      fi
    done
  become: true
  ignore_errors: true
  when: "'bastion' not in group_names"

- name: "Flush iptables rules"
  shell: |
    iptables -F && iptables -X
    iptables -t nat -F && iptables -t nat -X
    iptables -t raw -F && iptables -t raw -X
    iptables -t mangle -F && iptables -t mangle -X
  become: true
  ignore_errors: true
  when: "'bastion' not in group_names"

- name: "Remove kubectl binary from bastion"
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /usr/local/bin/kubectl
    - /usr/bin/kubectl
  become: true
  ignore_errors: true
  when: "'bastion' in group_names"

- name: "Remove kubectl package from bastion"
  package:
    name: "kubectl-{{ kube_version_full | default('*') }}"
    state: absent
  become: true
  ignore_errors: true
  when: "'bastion' in group_names"

- name: "Remove kubeconfig directory from bastion"
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /root/.kube
    - /home/{{ ansible_user }}/.kube
  become: true
  ignore_errors: true
  when: "'bastion' in group_names"

- name: "Display reset completion status"
  debug:
    msg: "Reset operation completed successfully on {{ inventory_hostname }}"
