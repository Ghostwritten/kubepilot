# =============================================================================
# roles/kubernetes/tasks/install_kubernetes.yml - Install Kubernetes Components
# =============================================================================
---
- name: "Check if Kubernetes components are already installed"
  package_facts:
    manager: auto

- name: "Check if Kubernetes repository is configured"
  stat:
    path: /etc/yum.repos.d/local.repo
  register: kubernetes_repo_exists

- name: "Fail if Kubernetes repository is not configured"
  fail:
    msg: "Kubernetes repository is not configured. Please run the repository setup task first."
  when: not kubernetes_repo_exists.stat.exists

- name: "Check if kubelet is installed with correct version"
  set_fact:
    kubelet_installed: "{{ 'kubelet' in ansible_facts.packages and ansible_facts.packages['kubelet'][0].version == kube_version_full }}"

- name: "Check if kubeadm is installed with correct version"
  set_fact:
    kubeadm_installed: "{{ 'kubeadm' in ansible_facts.packages and ansible_facts.packages['kubeadm'][0].version == kube_version_full }}"

- name: "Display installation status"
  debug:
    msg: |
      Installation Status for {{ inventory_hostname }}:
      - Kubelet installed: {{ kubelet_installed }}
      - Kubeadm installed: {{ kubeadm_installed }}
      - Target version: {{ kube_version_full }}

- name: "Fix package manager state inconsistency (if needed)"
  block:
    - name: "Check if kubeadm binary exists"
      stat:
        path: /usr/bin/kubeadm
      register: kubeadm_binary_exists

    - name: "Reinstall kubeadm if binary is missing but package is installed"
      yum:
        name: "kubeadm-{{ kube_version_full }}"
        state: present
        disable_gpg_check: yes
      when: 
        - kubeadm_installed
        - not kubeadm_binary_exists.stat.exists
      register: kubeadm_reinstall_result

    - name: "Reinstall kubelet if binary is missing but package is installed"
      yum:
        name: "kubelet-{{ kube_version_full }}"
        state: present
        disable_gpg_check: yes
      when: 
        - kubelet_installed
        - not kubeadm_binary_exists.stat.exists
      register: kubelet_reinstall_result
  when: kubelet_installed or kubeadm_installed

- name: "Install kubelet and kubeadm on all nodes"
  yum:
    name:
      - "kubelet-{{ kube_version_full }}"
      - "kubeadm-{{ kube_version_full }}"
    state: present
    disable_gpg_check: yes
  when: not kubelet_installed or not kubeadm_installed
  register: kubernetes_install_result

- name: "Verify kubelet installation"
  command: kubelet --version
  register: kubelet_version_check
  changed_when: false
  failed_when: kubelet_version_check.rc != 0
  when: kubernetes_install_result.changed or kubelet_installed

- name: "Verify kubeadm installation"
  command: kubeadm version
  register: kubeadm_version_check
  changed_when: false
  failed_when: kubeadm_version_check.rc != 0
  when: kubernetes_install_result.changed or kubeadm_installed

- name: "Display installed versions"
  debug:
    msg: |
      Kubernetes Components Installed on {{ inventory_hostname }}:
      - Kubelet: {{ 'Installed' if kubelet_installed else 'Not installed' }}
      - Kubeadm: {{ 'Installed' if kubeadm_installed else 'Not installed' }}

- name: "Install kubectl on control plane nodes"
  yum:
    name: "kubectl-{{ kube_version_full }}"
    state: present
    disable_gpg_check: yes
  when:
    - inventory_hostname in groups['kube_control_plane']
    - "'kubectl' not in ansible_facts.packages or ansible_facts.packages['kubectl'][0].version != kube_version_full"
  register: kubectl_install_result

- name: "Verify kubectl installation on control plane nodes"
  command: kubectl version --client
  register: kubectl_version_check
  changed_when: false
  failed_when: kubectl_version_check.rc != 0
  when:
    - inventory_hostname in groups['kube_control_plane']
    - kubectl_install_result.changed or ('kubectl' in ansible_facts.packages and ansible_facts.packages['kubectl'][0].version == kube_version_full)

- name: "Ensure kubelet service is enabled but not started yet"
  systemd:
    name: kubelet
    state: stopped
    enabled: yes
    daemon_reload: yes
  notify: reload systemd
  # Note: kubelet will be started in configure_kubelet.yml after configuration is complete

- name: "Create kubelet service directory if it doesn't exist"
  file:
    path: /etc/systemd/system/kubelet.service.d
    state: directory
    mode: '0755'
  when: kubernetes_install_result.changed

- name: "Final installation verification"
  debug:
    msg: |
      Kubernetes installation completed successfully on {{ inventory_hostname }}
      - Kubelet: {{ 'OK' if kubelet_installed else 'FAILED' }}
      - Kubeadm: {{ 'OK' if kubeadm_installed else 'FAILED' }}
      - Kubectl: {{ 'OK' if inventory_hostname in groups['kube_control_plane'] else 'N/A' }}
