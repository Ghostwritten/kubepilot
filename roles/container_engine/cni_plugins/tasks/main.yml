- name: Set CNI archive name
  set_fact:
    cni_archive_name: "cni-plugins-linux-{{ image_arch }}-{{ cni_version }}.tgz"

- name: Set CNI paths and resolved download URL
  set_fact:
    cni_archive: "{{ cni_download_dir | default('/opt/cni') }}/{{ cni_archive_name }}"
    cni_bin_dir: "{{ cni_bin_dir | default('/opt/cni/bin') }}"
    cni_download_url_resolved: >-
      {{
        (offline_mode | default(false)) | ternary(
          files_repo + '/' + cni_archive_name,
          'https://github.com/containernetworking/plugins/releases/download/' + cni_version + '/' + cni_archive_name
        )
      }}

- name: Ensure CNI plugin directory exists
  file:
    path: "{{ cni_bin_dir }}"
    state: directory
    mode: '0755'

- name: Download CNI plugins archive (offline or online)
  get_url:
    url: "{{ cni_download_url_resolved }}"
    dest: "{{ cni_archive }}"
    mode: '0644'
    checksum: "{{ cni_checksum | default(omit) }}"
  retries: 3
  delay: 5
  environment: "{{ (offline_mode | default(false)) | ternary({}, proxy_env) }}"
  register: cni_download_result

- name: Extract CNI plugins to CNI bin directory
  unarchive:
    src: "{{ cni_archive }}"
    dest: "{{ cni_bin_dir }}"
    remote_src: true
    # --strip-components=1 is not needed if the archive structure doesn't have a single top-level directory.
    # Most CNI plugin archives extract directly, so this option can sometimes cause issues.
    # If the archive cni-plugins-linux-amd64-v1.7.1.tgz has a top-level folder, keep this line.
    # Otherwise, it's safer to remove it. Let's assume it does not.
    # extra_opts: [--strip-components=1]
    creates: "{{ cni_bin_dir }}/bridge"

- name: Remove downloaded CNI plugins archive
  file:
    path: "{{ cni_archive }}"
    state: absent
  when: cleanup_enabled | default(true)
